AMLCode := DefBlockHeader TermList
DefBlockHeader := TableSignature TableLength SpecCompliance CheckSum OemID
 OemTableID OemRevision CreatorID CreatorRevision
TableSignature := DWordData // As defined in section 5.2.3.
TableLength := DWordData // Length of the table in bytes including
 // the block header.
SpecCompliance := ByteData // The revision of the structure.
CheckSum := ByteData // Byte checksum of the entire table.
OemID := ByteData(6) // OEM ID of up to 6 characters. If the OEM
 // ID is shorter than 6 characters, it
 // can be terminated with a NULL
 // character.
OemTableID := ByteData(8) // OEM Table ID of up to 8 characters. If
 // the OEM Table ID is shorter than 8
 // characters, it can be terminated with
 // a NULL character.
OemRevision := DWordData // OEM Table Revision.
CreatorID := DWordData // Vendor ID of the ASL compiler.
CreatorRevision := DWordData // Revision of the ASL compiler.

=====================================================================================

LeadNameChar := ‘A’-‘Z’ | ‘_’
DigitChar := ‘0’-‘9’
NameChar := DigitChar | LeadNameChar
RootChar := ‘\’
ParentPrefixChar := ‘^’
‘A’-‘Z’ := 0x41 - 0x5A
‘_’ := 0x5F
‘0’-‘9’ := 0x30 - 0x39
‘\’ := 0x5C
‘^’ := 0x5E
NameSeg := <LeadNameChar NameChar NameChar NameChar>
 // Notice that NameSegs shorter than 4 characters are filled with
 // trailing underscores (‘_’s).
NameString := <RootChar NamePath> | <PrefixPath NamePath>
PrefixPath := Nothing | <‘^’ PrefixPath>
NamePath := NameSeg | DualNamePath | MultiNamePath | NullName
DualNamePath := DualNamePrefix NameSeg NameSeg
DualNamePrefix := 0x2E
MultiNamePath := MultiNamePrefix SegCount NameSeg(SegCount)
MultiNamePrefix := 0x2F
SegCount := ByteData

=====================================================================================

SimpleName := NameString | ArgObj | LocalObj
SuperName := SimpleName | DebugObj | Type6Opcode
NullName := 0x00
Target := SuperName | NullName

=====================================================================================

ComputationalData := ByteConst | WordConst | DWordConst | QWordConst | String |
 ConstObj | RevisionOp | DefBuffer
DataObject := ComputationalData | DefPackage | DefVarPackage
DataRefObject := DataObject | ObjectReference | DDBHandle
ByteConst := BytePrefix ByteData
BytePrefix := 0x0A
WordConst := WordPrefix WordData
WordPrefix := 0x0B
DWordConst := DWordPrefix DWordData
DWordPrefix := 0x0C
QWordConst := QWordPrefix QWordData
QWordPrefix := 0x0E
String := StringPrefix AsciiCharList NullChar
StringPrefix := 0x0D
ConstObj := ZeroOp | OneOp | OnesOp
ByteList := Nothing | <ByteData ByteList>
ByteData := 0x00 - 0xFF
WordData := ByteData[0:7] ByteData[8:15]
 // 0x0000-0xFFFF
DWordData := WordData[0:15] WordData[16:31]
 // 0x00000000-0xFFFFFFFF
QWordData := DWordData[0:31] DWordData[32:63]
 // 0x0000000000000000-0xFFFFFFFFFFFFFFFF
AsciiCharList := Nothing | <AsciiChar AsciiCharList>
AsciiChar := 0x01 - 0x7F
NullChar := 0x00
ZeroOp := 0x00
OneOp := 0x01
OnesOp := 0xFF
RevisionOp := ExtOpPrefix 0x30
ExtOpPrefix := 0x5B

=====================================================================================

PkgLength := PkgLeadByte |
 <PkgLeadByte ByteData> |
 <PkgLeadByte ByteData ByteData> |
 <PkgLeadByte ByteData ByteData ByteData>
PkgLeadByte := <bit 7-6: ByteData count that follows (0-3)>
 <bit 5-4: Only used if PkgLength < 63>
 <bit 3-0: Least significant package length nybble>

 =====================================================================================

 Object := NameSpaceModifierObj | NamedObj
TermObj := Object | Type1Opcode | Type2Opcode
TermList := Nothing | <TermObj TermList>
TermArg := Type2Opcode | DataObject | ArgObj | LocalObj
MethodInvocation := NameString TermArgList
TermArgList := Nothing | <TermArg TermArgList>

 =====================================================================================

NameSpaceModifierObj := DefAlias | DefName | DefScope
DefAlias := AliasOp NameString NameString
AliasOp := 0x06
DefName := NameOp NameString DataRefObject
NameOp := 0x08
DefScope := ScopeOp PkgLength NameString TermList
ScopeOp := 0x10

 =====================================================================================

NamedObj := DefBankField | DefCreateBitField | DefCreateByteField | DefCreateDWordField |
 DefCreateField | DefCreateQWordField |DefCreateWordField | DefDataRegion |
 DefExternal | DefOpRegion | DefPowerRes | DefProcessor | DefThermalZone
DefBankField := BankFieldOp PkgLength NameString NameString BankValue FieldFlags FieldList
BankFieldOp := ExtOpPrefix 0x87
BankValue := TermArg => Integer
FieldFlags := ByteData // bit 0-3: AccessType
 // 0 AnyAcc
 // 1 ByteAcc
 // 2 WordAcc
 // 3 DWordAcc
 // 4 QWordAcc
 // 5 BufferAcc
 // 6 Reserved
 // 7-15 Reserved
 // bit 4: LockRule
 // 0 NoLock
 // 1 Lock
 // bit 5-6: UpdateRule
 // 0 Preserve
 // 1 WriteAsOnes 
 // 2 WriteAsZeros
 // bit 7: Reserved (must be 0)

FieldList := Nothing | <FieldElement FieldList>
NamedField := NameSeg PkgLength
ReservedField := 0x00 PkgLength
AccessField := 0x01 AccessType AccessAttrib
AccessType := ByteData // Bits 0:3 - Same as AccessType bits of FieldFlags.
 // Bits 4:5 - Reserved
 // Bits 7:6 - 0 = AccessAttrib = Normal Access Attributes
 // 1 = AccessAttrib = AttribBytes (x)
 // 2 = AccessAttrib = AttribRawBytes (x)
 // 3 = AccessAttrib = AttribRawProcessBytes (x)
 //
 // x' is encoded as bits 0:7 of the AccessAttrib byte.
AccessAttrib := ByteData // If AccessType is BufferAcc for the SMB or
 // GPIO OpRegions, AccessAttrib can be one of
 // the following values:
 // 0x02 AttribQuick
 // 0x04 AttribSendReceive
 // 0x06 AttribByte
 // 0x08 AttribWord
 // 0x0A AttribBlock
 // 0x0C AttribProcessCall
 // 0x0D AttribBlockProcessCall
ConnectField := <0x02 NameString> | <0x02 BufferData>
DefCreateBitField := CreateBitFieldOp SourceBuff BitIndex NameString
CreateBitFieldOp := 0x8D
SourceBuff := TermArg => Buffer
BitIndex := TermArg => Integer
DefCreateByteField := CreateByteFieldOp SourceBuff ByteIndex NameString
CreateByteFieldOp := 0x8C
ByteIndex := TermArg => Integer
DefCreateDWordField := CreateDWordFieldOp SourceBuff ByteIndex NameString
CreateDWordFieldOp := 0x8A
DefCreateField := CreateFieldOp SourceBuff BitIndex NumBits NameString
CreateFieldOp := ExtOpPrefix 0x13
NumBits := TermArg => Integer
DefCreateQWordField := CreateQWordFieldOp SourceBuff ByteIndex NameString
CreateQWordFieldOp := 0x8F

DefCreateWordField := CreateWordFieldOp SourceBuff ByteIndex NameString
CreateWordFieldOp := 0x8B
DefDataRegion := DataRegionOp NameString TermArg TermArg TermArg
DataRegionOp := ExOpPrefix 0x88
DefDevice := DeviceOp PkgLength NameString TermList
DeviceOp := ExtOpPrefix 0x82
DefEvent := EventOp NameString
EventOp := ExtOpPrefix 0x02
DefExternal := ExternalOp NameString ObjectType ArgumentCount
ExternalOp := 0x15
ObjectType := ByteData
ArgumentCount := ByteData (0 – 7)
DefField := FieldOp PkgLength NameString FieldFlags FieldList
FieldOp := ExtOpPrefix 0x81
DefIndexField := IndexFieldOp PkgLength NameString NameString FieldFlags FieldList
IndexFieldOp := ExtOpPrefix 0x86
DefMethod := MethodOp PkgLength NameString MethodFlags TermList
MethodOp := 0x14
MethodFlags := ByteData // bit 0-2: ArgCount (0-7)
 // bit 3: SerializeFlag
 // 0 NotSerialized
 // 1 Serialized
 // bit 4-7: SyncLevel (0x00-0x0f)
DefMutex := MutexOp NameString SyncFlags
MutexOp := ExtOpPrefix 0x01
SyncFlags := ByteData // bit 0-3: SyncLevel (0x00-0x0f)
 // bit 4-7: Reserved (must be 0)
DefOpRegion := OpRegionOp NameString RegionSpace RegionOffset RegionLen
OpRegionOp := ExtOpPrefix 0x80
RegionSpace := ByteData // 0x00 SystemMemory
 // 0x01 SystemIO
 // 0x02 PCI_Config
 // 0x03 EmbeddedControl
 // 0x04 SMBus
 // 0x05 SystemCMOS
 // 0x06 PciBarTarget
 // 0x07 IPMI
 // 0x08 GeneralPurposeIO
 // 0x09 GenericSerialBus
 // 0x80-0xFF: OEM Defined
RegionOffset := TermArg => Integer

DefPowerRes := PowerResOp PkgLength NameString SystemLevel ResourceOrder TermList
PowerResOp := ExtOpPrefix 0x84
SystemLevel := ByteData
ResourceOrder := WordData
DefProcessor := ProcessorOp PkgLength NameString ProcID PblkAddr PblkLen TermList
ProcessorOp := ExtOpPrefix 0x83
ProcID := ByteData
PblkAddr := DWordData

PblkLen := ByteData
DefThermalZone := ThermalZoneOp PkgLength NameString TermList
ThermalZoneOp := ExtOpPrefix 0x85
ExtendedAccessField := 0x03 AccessType ExtendedAccessAttrib AccessLength
ExtendedAccessAttrib := ByteData // 0x0B AttribBytes
 // 0x0E AttribRawBytes
 // 0x0F AttribRawProcess
FieldElement := NamedField | ReservedField | AccessField | ExtendedAccessField |
 ConnectField
 
 =====================================================================================


 =====================================================================================
